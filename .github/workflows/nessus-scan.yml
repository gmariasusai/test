name: Nessus Security Scan

on:
  push:
    branches:
      - main

jobs:
  nessus_scan:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install jq (if missing)
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Stop Existing Scans
        run: |
          # List all scans and check their status
          ALL_SCANS=$(curl -s -k -X GET "https://10.10.30.79:8834/scans" \
            -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f")

          # Loop through each scan
          echo "$ALL_SCANS" | jq -c '.scans[]' | while read -r scan; do
            ID=$(echo "$scan" | jq -r '.id')
            STATUS=$(curl -s -k -X GET "https://10.10.30.79:8834/scans/$ID" \
              -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f" | jq -r '.info.status')

            echo "Scan $ID status: $STATUS"

            # If it's still running, stop it
            if [[ "$STATUS" == "running" || "$STATUS" == "pending" ]]; then
              echo "Stopping scan $ID"
              curl -s -k -X POST "https://10.10.30.79:8834/scans/$ID/stop" \
                -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f"
              # Optionally, delete the scan
              curl -s -k -X DELETE "https://10.10.30.79:8834/scans/$ID" \
                -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f"
              echo "Scan $ID stopped and deleted."
            fi
          done

      - name: Start Nessus Scan
        id: start_scan
        run: |
          SCAN_RESPONSE=$(curl -s -k -X POST "https://10.10.30.79:8834/scans" \
            -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f" \
            -H "Content-Type: application/json" \
            -d '{
              "uuid": "731a8e52-3ea6-a291-ec0a-d2ff0619c19d7bd788d6be818b65",
              "settings": {
                "name": "GitHub Nessus Scan",
                "text_targets": "10.10.30.79",
                "scanner_id": "1"
              }
            }')

          SCAN_ID=$(echo "$SCAN_RESPONSE" | jq -r '.scan.id')
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV

          # Launch the scan
          curl -s -k -X POST "https://10.10.30.79:8834/scans/$SCAN_ID/launch" \
            -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f"

      - name: Wait for Scan to Complete
        run: |
          TIMEOUT=900  # 15 minutes
          INTERVAL=30
          ELAPSED=0

          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(curl -s -k -X GET "https://10.10.30.79:8834/scans/$SCAN_ID" \
              -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f" | jq -r '.info.status')

            echo "Current scan status: $STATUS"
            if [[ "$STATUS" == "completed" ]]; then
              echo "Scan completed."
              break
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [[ "$STATUS" != "completed" ]]; then
            echo "Scan did not complete in time."
            exit 1
          fi

      - name: Export Scan Report
        run: |
          EXPORT_ID=$(curl -s -k -X POST "https://10.10.30.79:8834/scans/$SCAN_ID/export" \
            -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f" \
            -d '{"format": "html"}' | jq -r '.file')

          # Wait for export to be ready
          while true; do
            EXPORT_STATUS=$(curl -s -k -X GET "https://10.10.30.79:8834/scans/$SCAN_ID/export/$EXPORT_ID/status" \
              -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f" | jq -r '.status')

            echo "Export status: $EXPORT_STATUS"
            if [[ "$EXPORT_STATUS" == "ready" ]]; then
              break
            fi
            sleep 5
          done

          # Download report
          curl -k -X GET "https://10.10.30.79:8834/scans/$SCAN_ID/export/$EXPORT_ID/download" \
            -H "X-ApiKeys: accessKey=ed3364476d8b920196645ca9c0c3a25c61e3847c810b90c73c8d5c0dfcc8f316; secretKey=2c25353939b1eb85ddc23d95e17fd92e867732e342bbc69fed708ff7e024cb0f" -o nessus_scan_report.html

      # - name: Upload Report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: nessus-scan-report
      #     path: nessus_scan_report.html
